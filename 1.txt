public abstract class asd<T extends asd<T>>{
	//ConcurrentMemoizingValue is a lazy loading mechanism
	final ConcurrentMemoizingValue<SFieldReference<T>> asd = new ConcurrentMemoizingValue<SFieldReference<T>>() {
		@Override protected SFieldReference<T> make() {
			return indexedReferenceField(getMeta(), "published_version");
		}
	};

	SFieldReference<T> getasd() { return asd.call(); }

	protected asd(Class<T> userClass, String tableName) {
		super(userClass, tableName);
	}
	public abstract asd getMeta();
}
******************************************************
public class aa extends asd<Report> {
	private aa() {
		super(aaa.class, "tablename", aa.META);
	}

	public static final aa META = new aa();
	
	@Override
	public asd getMeta(){
		return META;
	}
}
